package renderer;

import geometries.Geometry;
import geometries.Plane;
import geometries.Sphere;
import geometries.Triangle;
import org.junit.jupiter.api.Test;
import primitives.Point;
import primitives.Vector;
import scene.Scene;

import static org.junit.jupiter.api.Assertions.assertEquals;

/**
 * The RayIntegrationTests class contains integration tests for the interaction between rays and various geometries.
 * It includes test cases for spheres, planes, and triangles.
 */
public class RayIntegrationTests {

    /**
     * Counts the total number of intersections between a given geometry and rays generated by a camera.
     *
     * @param geometry The geometry to test for intersections.
     * @param camera   The camera used to generate rays.
     * @return The total number of intersections.
     */
    public int countIntersections(Geometry geometry, Camera camera) {
        int counter = 0;

        for (int i = 0; i < camera.getHeight(); i++) {
            for (int j = 0; j < camera.getWidth(); j++) {
                final var intersections = geometry.findGeoIntersections(camera.constructRay(3, 3, i, j));
                if (intersections != null) counter += intersections.size();
            }
        }
        return counter;
    }

    /**
     * Builder for creating a camera with default settings for testing.
     */
    final Camera.Builder cameraBuilder = Camera.getBuilder()
            .setDirection(new Vector(0, 0, -1), new Vector(0, -1, 0))
            .setVpSize(3, 3)
            .setVpDistance(1)
            .setRayTracer(new SimpleRayTracer(new Scene("scene")))
            .setImageWriter(new ImageWriter("im",5,5));


    /**
     * Error message for failed ray tests.
     */
    final String badRay = "Bad ray";

    /**
     * Test case for spheres.
     */
    @Test
    void testSphere() {
        Sphere sphere1 = new Sphere(1, new Point(0, 0, -3));
        Sphere sphere2 = new Sphere(2.5d, new Point(0, 0, -2.5));
        Sphere sphere3 = new Sphere(2, new Point(0, 0, -2));
        Sphere sphere4 = new Sphere(4d, new Point(0, 0, 0));
        Sphere sphere5 = new Sphere(0.5d, new Point(0, 0, 1));

        // TC01:
        assertEquals(2, countIntersections(sphere1, cameraBuilder.setLocation(Point.ZERO).build()), badRay);

        // TC02:
        assertEquals(18, countIntersections(sphere2, cameraBuilder.setLocation(new Point(0, 0, 0.5)).build()), badRay);

        // TC03:
        assertEquals(10, countIntersections(sphere3, cameraBuilder.setLocation(new Point(0, 0, 0.5)).build()), badRay);

        // TC04:
        assertEquals(9, countIntersections(sphere4, cameraBuilder.setLocation(new Point(0, 0, 0.5)).build()), badRay);

        // TC05: (uses camera1)
        assertEquals(0, countIntersections(sphere5, cameraBuilder.setLocation(new Point(0, 0, 0)).build()), badRay);
    }

    /**
     * Test case for planes.
     */
    @Test
    void testPlain() {
        Plane plane1 = new Plane(new Point(0, 0, -3), new Vector(0, 0, 1));
        Plane plane2 = new Plane(new Point(0, 0, -3), new Vector(0, 2, 5));
        Plane plane3 = new Plane(new Point(0, 0, -2), new Vector(1, -1, 1));

        // TC01:
        assertEquals(9, countIntersections(plane1, cameraBuilder.setLocation(new Point(0, 0, 0)).build()), badRay);

        // TC02:
        // Uncomment this line once the intersection calculation is corrected
        assertEquals(9, countIntersections(plane2, cameraBuilder.setLocation(new Point(0, 0, 0)).build()), badRay);

        // TC03:
        assertEquals(6, countIntersections(plane3, cameraBuilder.setLocation(new Point(0, 0, 0)).build()), badRay);
    }

    /**
     * Test case for triangles.
     */
    @Test
    void testTrinagle() {
        Triangle triangle1 = new Triangle(new Point(0, 1, -2), new Point(1, -1, -2), new Point(-1, -1, -2));
        Triangle triangle2 = new Triangle(new Point(0, 20, -2), new Point(1, -1, -2), new Point(-1, -1, -2));

        // TC01:
        assertEquals(1, countIntersections(triangle1, cameraBuilder.setLocation(new Point(0, 0, 0)).build()), badRay);

        // TC02:
        assertEquals(2, countIntersections(triangle2, cameraBuilder.setLocation(new Point(0, 0, 0)).build()), badRay);
    }
}
